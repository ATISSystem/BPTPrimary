'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace TerminalsWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TerminalsWebServiceSoap", [Namespace]:="http://localhost/")>  _
    Partial Public Class TerminalsWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private WebMethodSetNewSystemStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodGetNewSystemStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ACKSignalRecivedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodSyncTrucksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodSyncAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodIdentifyTerminalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodCreateNewterminalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodTerminalIdFromTerminalNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodLoggingReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodGetTruckTraceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodGetLastNobatInOnlineifExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodCurrentShamsiDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodCurrentTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodUserAuthenticationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodDelNobatBarnameOnlineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebMethodDelNobatUserRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.PayanehClassLibrary.My.MySettings.Default.PayanehClassLibrary_TerminalsWebService_TerminalsWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event WebMethodSetNewSystemStatusCompleted As WebMethodSetNewSystemStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodGetNewSystemStatusCompleted As WebMethodGetNewSystemStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ACKSignalRecivedCompleted As ACKSignalRecivedCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodSyncTrucksCompleted As WebMethodSyncTrucksCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodSyncAllCompleted As WebMethodSyncAllCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodIdentifyTerminalCompleted As WebMethodIdentifyTerminalCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodCreateNewterminalCompleted As WebMethodCreateNewterminalCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodTerminalIdFromTerminalNameCompleted As WebMethodTerminalIdFromTerminalNameCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodLoggingReportCompleted As WebMethodLoggingReportCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodGetTruckTraceCompleted As WebMethodGetTruckTraceCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodGetLastNobatInOnlineifExistCompleted As WebMethodGetLastNobatInOnlineifExistCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodCurrentShamsiDateCompleted As WebMethodCurrentShamsiDateCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodCurrentTimeCompleted As WebMethodCurrentTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodUserAuthenticationCompleted As WebMethodUserAuthenticationCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodDelNobatBarnameOnlineCompleted As WebMethodDelNobatBarnameOnlineCompletedEventHandler
        
        '''<remarks/>
        Public Event WebMethodDelNobatUserRequestCompleted As WebMethodDelNobatUserRequestCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodSetNewSystemStatus", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebMethodSetNewSystemStatus(ByVal AId As String, ByVal Status As SystemStatus, ByVal TerminalId As Short, ByVal CommandValueData As String)
            Me.Invoke("WebMethodSetNewSystemStatus", New Object() {AId, Status, TerminalId, CommandValueData})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodSetNewSystemStatusAsync(ByVal AId As String, ByVal Status As SystemStatus, ByVal TerminalId As Short, ByVal CommandValueData As String)
            Me.WebMethodSetNewSystemStatusAsync(AId, Status, TerminalId, CommandValueData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodSetNewSystemStatusAsync(ByVal AId As String, ByVal Status As SystemStatus, ByVal TerminalId As Short, ByVal CommandValueData As String, ByVal userState As Object)
            If (Me.WebMethodSetNewSystemStatusOperationCompleted Is Nothing) Then
                Me.WebMethodSetNewSystemStatusOperationCompleted = AddressOf Me.OnWebMethodSetNewSystemStatusOperationCompleted
            End If
            Me.InvokeAsync("WebMethodSetNewSystemStatus", New Object() {AId, Status, TerminalId, CommandValueData}, Me.WebMethodSetNewSystemStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodSetNewSystemStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodSetNewSystemStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodSetNewSystemStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodGetNewSystemStatus", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodGetNewSystemStatus(ByVal AId As String, ByRef TerminalIdToChangeStatuss As Short, ByRef CommandId As String, ByRef CommandValueData As String) As SystemStatus
            Dim results() As Object = Me.Invoke("WebMethodGetNewSystemStatus", New Object() {AId, TerminalIdToChangeStatuss, CommandId, CommandValueData})
            TerminalIdToChangeStatuss = CType(results(1),Short)
            CommandId = CType(results(2),String)
            CommandValueData = CType(results(3),String)
            Return CType(results(0),SystemStatus)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetNewSystemStatusAsync(ByVal AId As String, ByVal TerminalIdToChangeStatuss As Short, ByVal CommandId As String, ByVal CommandValueData As String)
            Me.WebMethodGetNewSystemStatusAsync(AId, TerminalIdToChangeStatuss, CommandId, CommandValueData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetNewSystemStatusAsync(ByVal AId As String, ByVal TerminalIdToChangeStatuss As Short, ByVal CommandId As String, ByVal CommandValueData As String, ByVal userState As Object)
            If (Me.WebMethodGetNewSystemStatusOperationCompleted Is Nothing) Then
                Me.WebMethodGetNewSystemStatusOperationCompleted = AddressOf Me.OnWebMethodGetNewSystemStatusOperationCompleted
            End If
            Me.InvokeAsync("WebMethodGetNewSystemStatus", New Object() {AId, TerminalIdToChangeStatuss, CommandId, CommandValueData}, Me.WebMethodGetNewSystemStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodGetNewSystemStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodGetNewSystemStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodGetNewSystemStatusCompleted(Me, New WebMethodGetNewSystemStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/ACKSignalRecived", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ACKSignalRecived(ByVal AId As String, ByVal TerminalId As Short, ByVal ACKSignall As ACKSignal, ByVal Data As System.Data.DataSet, ByVal AckNoteString As String, ByVal LogSource As LogSource, ByVal TDB As Database, ByVal UserName As String, ByVal MethodName As String, ByVal SystemStatuss As SystemStatus, ByVal SyncCounting As Byte)
            Me.Invoke("ACKSignalRecived", New Object() {AId, TerminalId, ACKSignall, Data, AckNoteString, LogSource, TDB, UserName, MethodName, SystemStatuss, SyncCounting})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ACKSignalRecivedAsync(ByVal AId As String, ByVal TerminalId As Short, ByVal ACKSignall As ACKSignal, ByVal Data As System.Data.DataSet, ByVal AckNoteString As String, ByVal LogSource As LogSource, ByVal TDB As Database, ByVal UserName As String, ByVal MethodName As String, ByVal SystemStatuss As SystemStatus, ByVal SyncCounting As Byte)
            Me.ACKSignalRecivedAsync(AId, TerminalId, ACKSignall, Data, AckNoteString, LogSource, TDB, UserName, MethodName, SystemStatuss, SyncCounting, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ACKSignalRecivedAsync(ByVal AId As String, ByVal TerminalId As Short, ByVal ACKSignall As ACKSignal, ByVal Data As System.Data.DataSet, ByVal AckNoteString As String, ByVal LogSource As LogSource, ByVal TDB As Database, ByVal UserName As String, ByVal MethodName As String, ByVal SystemStatuss As SystemStatus, ByVal SyncCounting As Byte, ByVal userState As Object)
            If (Me.ACKSignalRecivedOperationCompleted Is Nothing) Then
                Me.ACKSignalRecivedOperationCompleted = AddressOf Me.OnACKSignalRecivedOperationCompleted
            End If
            Me.InvokeAsync("ACKSignalRecived", New Object() {AId, TerminalId, ACKSignall, Data, AckNoteString, LogSource, TDB, UserName, MethodName, SystemStatuss, SyncCounting}, Me.ACKSignalRecivedOperationCompleted, userState)
        End Sub
        
        Private Sub OnACKSignalRecivedOperationCompleted(ByVal arg As Object)
            If (Not (Me.ACKSignalRecivedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ACKSignalRecivedCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodSyncTrucks", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodSyncTrucks(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewTrucks As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("WebMethodSyncTrucks", New Object() {AId, TerminalID, ClientNewTrucks})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodSyncTrucksAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewTrucks As System.Data.DataSet)
            Me.WebMethodSyncTrucksAsync(AId, TerminalID, ClientNewTrucks, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodSyncTrucksAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewTrucks As System.Data.DataSet, ByVal userState As Object)
            If (Me.WebMethodSyncTrucksOperationCompleted Is Nothing) Then
                Me.WebMethodSyncTrucksOperationCompleted = AddressOf Me.OnWebMethodSyncTrucksOperationCompleted
            End If
            Me.InvokeAsync("WebMethodSyncTrucks", New Object() {AId, TerminalID, ClientNewTrucks}, Me.WebMethodSyncTrucksOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodSyncTrucksOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodSyncTrucksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodSyncTrucksCompleted(Me, New WebMethodSyncTrucksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodSyncAll", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebMethodSyncAll(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewNobats As System.Data.DataSet, ByRef SyncNobats As System.Data.DataSet, ByRef SyncTrucks As System.Data.DataSet, ByRef SyncTerminals As System.Data.DataSet)
            Dim results() As Object = Me.Invoke("WebMethodSyncAll", New Object() {AId, TerminalID, ClientNewNobats, SyncNobats, SyncTrucks, SyncTerminals})
            SyncNobats = CType(results(0),System.Data.DataSet)
            SyncTrucks = CType(results(1),System.Data.DataSet)
            SyncTerminals = CType(results(2),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodSyncAllAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewNobats As System.Data.DataSet, ByVal SyncNobats As System.Data.DataSet, ByVal SyncTrucks As System.Data.DataSet, ByVal SyncTerminals As System.Data.DataSet)
            Me.WebMethodSyncAllAsync(AId, TerminalID, ClientNewNobats, SyncNobats, SyncTrucks, SyncTerminals, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodSyncAllAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal ClientNewNobats As System.Data.DataSet, ByVal SyncNobats As System.Data.DataSet, ByVal SyncTrucks As System.Data.DataSet, ByVal SyncTerminals As System.Data.DataSet, ByVal userState As Object)
            If (Me.WebMethodSyncAllOperationCompleted Is Nothing) Then
                Me.WebMethodSyncAllOperationCompleted = AddressOf Me.OnWebMethodSyncAllOperationCompleted
            End If
            Me.InvokeAsync("WebMethodSyncAll", New Object() {AId, TerminalID, ClientNewNobats, SyncNobats, SyncTrucks, SyncTerminals}, Me.WebMethodSyncAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodSyncAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodSyncAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodSyncAllCompleted(Me, New WebMethodSyncAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodIdentifyTerminal", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodIdentifyTerminal(ByVal AId As String, ByVal IdentifyCode As String) As Short
            Dim results() As Object = Me.Invoke("WebMethodIdentifyTerminal", New Object() {AId, IdentifyCode})
            Return CType(results(0),Short)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodIdentifyTerminalAsync(ByVal AId As String, ByVal IdentifyCode As String)
            Me.WebMethodIdentifyTerminalAsync(AId, IdentifyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodIdentifyTerminalAsync(ByVal AId As String, ByVal IdentifyCode As String, ByVal userState As Object)
            If (Me.WebMethodIdentifyTerminalOperationCompleted Is Nothing) Then
                Me.WebMethodIdentifyTerminalOperationCompleted = AddressOf Me.OnWebMethodIdentifyTerminalOperationCompleted
            End If
            Me.InvokeAsync("WebMethodIdentifyTerminal", New Object() {AId, IdentifyCode}, Me.WebMethodIdentifyTerminalOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodIdentifyTerminalOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodIdentifyTerminalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodIdentifyTerminalCompleted(Me, New WebMethodIdentifyTerminalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodCreateNewterminal", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebMethodCreateNewterminal(ByVal AId As String, ByVal TerminalName As String, ByRef TerminalId As Short, ByRef IdentifyCode As String)
            Dim results() As Object = Me.Invoke("WebMethodCreateNewterminal", New Object() {AId, TerminalName, TerminalId, IdentifyCode})
            TerminalId = CType(results(0),Short)
            IdentifyCode = CType(results(1),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodCreateNewterminalAsync(ByVal AId As String, ByVal TerminalName As String, ByVal TerminalId As Short, ByVal IdentifyCode As String)
            Me.WebMethodCreateNewterminalAsync(AId, TerminalName, TerminalId, IdentifyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodCreateNewterminalAsync(ByVal AId As String, ByVal TerminalName As String, ByVal TerminalId As Short, ByVal IdentifyCode As String, ByVal userState As Object)
            If (Me.WebMethodCreateNewterminalOperationCompleted Is Nothing) Then
                Me.WebMethodCreateNewterminalOperationCompleted = AddressOf Me.OnWebMethodCreateNewterminalOperationCompleted
            End If
            Me.InvokeAsync("WebMethodCreateNewterminal", New Object() {AId, TerminalName, TerminalId, IdentifyCode}, Me.WebMethodCreateNewterminalOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodCreateNewterminalOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodCreateNewterminalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodCreateNewterminalCompleted(Me, New WebMethodCreateNewterminalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodTerminalIdFromTerminalName", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodTerminalIdFromTerminalName(ByVal AId As String, ByVal TerminalName As String) As Short
            Dim results() As Object = Me.Invoke("WebMethodTerminalIdFromTerminalName", New Object() {AId, TerminalName})
            Return CType(results(0),Short)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodTerminalIdFromTerminalNameAsync(ByVal AId As String, ByVal TerminalName As String)
            Me.WebMethodTerminalIdFromTerminalNameAsync(AId, TerminalName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodTerminalIdFromTerminalNameAsync(ByVal AId As String, ByVal TerminalName As String, ByVal userState As Object)
            If (Me.WebMethodTerminalIdFromTerminalNameOperationCompleted Is Nothing) Then
                Me.WebMethodTerminalIdFromTerminalNameOperationCompleted = AddressOf Me.OnWebMethodTerminalIdFromTerminalNameOperationCompleted
            End If
            Me.InvokeAsync("WebMethodTerminalIdFromTerminalName", New Object() {AId, TerminalName}, Me.WebMethodTerminalIdFromTerminalNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodTerminalIdFromTerminalNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodTerminalIdFromTerminalNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodTerminalIdFromTerminalNameCompleted(Me, New WebMethodTerminalIdFromTerminalNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodLoggingReport", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodLoggingReport(ByVal AId As String, ByVal DateAndTime As Date, ByRef Data As System.Data.DataSet) As Short
            Dim results() As Object = Me.Invoke("WebMethodLoggingReport", New Object() {AId, DateAndTime, Data})
            Data = CType(results(1),System.Data.DataSet)
            Return CType(results(0),Short)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodLoggingReportAsync(ByVal AId As String, ByVal DateAndTime As Date, ByVal Data As System.Data.DataSet)
            Me.WebMethodLoggingReportAsync(AId, DateAndTime, Data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodLoggingReportAsync(ByVal AId As String, ByVal DateAndTime As Date, ByVal Data As System.Data.DataSet, ByVal userState As Object)
            If (Me.WebMethodLoggingReportOperationCompleted Is Nothing) Then
                Me.WebMethodLoggingReportOperationCompleted = AddressOf Me.OnWebMethodLoggingReportOperationCompleted
            End If
            Me.InvokeAsync("WebMethodLoggingReport", New Object() {AId, DateAndTime, Data}, Me.WebMethodLoggingReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodLoggingReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodLoggingReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodLoggingReportCompleted(Me, New WebMethodLoggingReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodGetTruckTrace", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodGetTruckTrace(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TotalRec As Short, ByRef Data As System.Data.DataSet) As TruckTrace
            Dim results() As Object = Me.Invoke("WebMethodGetTruckTrace", New Object() {AId, Pelak, Serial, TotalRec, Data})
            Data = CType(results(1),System.Data.DataSet)
            Return CType(results(0),TruckTrace)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetTruckTraceAsync(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TotalRec As Short, ByVal Data As System.Data.DataSet)
            Me.WebMethodGetTruckTraceAsync(AId, Pelak, Serial, TotalRec, Data, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetTruckTraceAsync(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TotalRec As Short, ByVal Data As System.Data.DataSet, ByVal userState As Object)
            If (Me.WebMethodGetTruckTraceOperationCompleted Is Nothing) Then
                Me.WebMethodGetTruckTraceOperationCompleted = AddressOf Me.OnWebMethodGetTruckTraceOperationCompleted
            End If
            Me.InvokeAsync("WebMethodGetTruckTrace", New Object() {AId, Pelak, Serial, TotalRec, Data}, Me.WebMethodGetTruckTraceOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodGetTruckTraceOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodGetTruckTraceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodGetTruckTraceCompleted(Me, New WebMethodGetTruckTraceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodGetLastNobatInOnlineifExist", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodGetLastNobatInOnlineifExist(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TerminalID As Short, ByRef NobatDateTime As Date) As Boolean
            Dim results() As Object = Me.Invoke("WebMethodGetLastNobatInOnlineifExist", New Object() {AId, Pelak, Serial, TerminalID, NobatDateTime})
            NobatDateTime = CType(results(1),Date)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetLastNobatInOnlineifExistAsync(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TerminalID As Short, ByVal NobatDateTime As Date)
            Me.WebMethodGetLastNobatInOnlineifExistAsync(AId, Pelak, Serial, TerminalID, NobatDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodGetLastNobatInOnlineifExistAsync(ByVal AId As String, ByVal Pelak As String, ByVal Serial As String, ByVal TerminalID As Short, ByVal NobatDateTime As Date, ByVal userState As Object)
            If (Me.WebMethodGetLastNobatInOnlineifExistOperationCompleted Is Nothing) Then
                Me.WebMethodGetLastNobatInOnlineifExistOperationCompleted = AddressOf Me.OnWebMethodGetLastNobatInOnlineifExistOperationCompleted
            End If
            Me.InvokeAsync("WebMethodGetLastNobatInOnlineifExist", New Object() {AId, Pelak, Serial, TerminalID, NobatDateTime}, Me.WebMethodGetLastNobatInOnlineifExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodGetLastNobatInOnlineifExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodGetLastNobatInOnlineifExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodGetLastNobatInOnlineifExistCompleted(Me, New WebMethodGetLastNobatInOnlineifExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodCurrentShamsiDate", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodCurrentShamsiDate() As String
            Dim results() As Object = Me.Invoke("WebMethodCurrentShamsiDate", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodCurrentShamsiDateAsync()
            Me.WebMethodCurrentShamsiDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodCurrentShamsiDateAsync(ByVal userState As Object)
            If (Me.WebMethodCurrentShamsiDateOperationCompleted Is Nothing) Then
                Me.WebMethodCurrentShamsiDateOperationCompleted = AddressOf Me.OnWebMethodCurrentShamsiDateOperationCompleted
            End If
            Me.InvokeAsync("WebMethodCurrentShamsiDate", New Object(-1) {}, Me.WebMethodCurrentShamsiDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodCurrentShamsiDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodCurrentShamsiDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodCurrentShamsiDateCompleted(Me, New WebMethodCurrentShamsiDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodCurrentTime", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodCurrentTime() As String
            Dim results() As Object = Me.Invoke("WebMethodCurrentTime", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodCurrentTimeAsync()
            Me.WebMethodCurrentTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodCurrentTimeAsync(ByVal userState As Object)
            If (Me.WebMethodCurrentTimeOperationCompleted Is Nothing) Then
                Me.WebMethodCurrentTimeOperationCompleted = AddressOf Me.OnWebMethodCurrentTimeOperationCompleted
            End If
            Me.InvokeAsync("WebMethodCurrentTime", New Object(-1) {}, Me.WebMethodCurrentTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodCurrentTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodCurrentTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodCurrentTimeCompleted(Me, New WebMethodCurrentTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodUserAuthentication", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WebMethodUserAuthentication(ByVal AId As String, ByVal UserId As String, ByVal UserPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("WebMethodUserAuthentication", New Object() {AId, UserId, UserPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WebMethodUserAuthenticationAsync(ByVal AId As String, ByVal UserId As String, ByVal UserPassword As String)
            Me.WebMethodUserAuthenticationAsync(AId, UserId, UserPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodUserAuthenticationAsync(ByVal AId As String, ByVal UserId As String, ByVal UserPassword As String, ByVal userState As Object)
            If (Me.WebMethodUserAuthenticationOperationCompleted Is Nothing) Then
                Me.WebMethodUserAuthenticationOperationCompleted = AddressOf Me.OnWebMethodUserAuthenticationOperationCompleted
            End If
            Me.InvokeAsync("WebMethodUserAuthentication", New Object() {AId, UserId, UserPassword}, Me.WebMethodUserAuthenticationOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodUserAuthenticationOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodUserAuthenticationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodUserAuthenticationCompleted(Me, New WebMethodUserAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodDelNobatBarnameOnline", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebMethodDelNobatBarnameOnline(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String)
            Me.Invoke("WebMethodDelNobatBarnameOnline", New Object() {AId, TerminalID, SyncTerminalID, Pelak, Serial})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodDelNobatBarnameOnlineAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String)
            Me.WebMethodDelNobatBarnameOnlineAsync(AId, TerminalID, SyncTerminalID, Pelak, Serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodDelNobatBarnameOnlineAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String, ByVal userState As Object)
            If (Me.WebMethodDelNobatBarnameOnlineOperationCompleted Is Nothing) Then
                Me.WebMethodDelNobatBarnameOnlineOperationCompleted = AddressOf Me.OnWebMethodDelNobatBarnameOnlineOperationCompleted
            End If
            Me.InvokeAsync("WebMethodDelNobatBarnameOnline", New Object() {AId, TerminalID, SyncTerminalID, Pelak, Serial}, Me.WebMethodDelNobatBarnameOnlineOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodDelNobatBarnameOnlineOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodDelNobatBarnameOnlineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodDelNobatBarnameOnlineCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/WebMethodDelNobatUserRequest", RequestNamespace:="http://localhost/", ResponseNamespace:="http://localhost/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebMethodDelNobatUserRequest(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String)
            Me.Invoke("WebMethodDelNobatUserRequest", New Object() {AId, TerminalID, SyncTerminalID, Pelak, Serial})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodDelNobatUserRequestAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String)
            Me.WebMethodDelNobatUserRequestAsync(AId, TerminalID, SyncTerminalID, Pelak, Serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebMethodDelNobatUserRequestAsync(ByVal AId As String, ByVal TerminalID As Short, ByVal SyncTerminalID As Short, ByVal Pelak As String, ByVal Serial As String, ByVal userState As Object)
            If (Me.WebMethodDelNobatUserRequestOperationCompleted Is Nothing) Then
                Me.WebMethodDelNobatUserRequestOperationCompleted = AddressOf Me.OnWebMethodDelNobatUserRequestOperationCompleted
            End If
            Me.InvokeAsync("WebMethodDelNobatUserRequest", New Object() {AId, TerminalID, SyncTerminalID, Pelak, Serial}, Me.WebMethodDelNobatUserRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebMethodDelNobatUserRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebMethodDelNobatUserRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebMethodDelNobatUserRequestCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/")>  _
    Public Enum SystemStatus
        
        '''<remarks/>
        None
        
        '''<remarks/>
        SystemIdle
        
        '''<remarks/>
        SystemGeneral
        
        '''<remarks/>
        SystemClearNobatsTrucksBufferAndSilent
        
        '''<remarks/>
        SystemFullSilent
        
        '''<remarks/>
        WinServiceSilent
        
        '''<remarks/>
        StpExistNobatSilent
        
        '''<remarks/>
        ExecuteNonOutputSqlCommand
        
        '''<remarks/>
        ExecuteWithOutputSqlCommand
        
        '''<remarks/>
        SendCurrentStatus
        
        '''<remarks/>
        SetWinServiceTimerInterval
        
        '''<remarks/>
        SetWinServiceSyncCounting
        
        '''<remarks/>
        GetWinServiceConnectionString
        
        '''<remarks/>
        GetWinServiceTerminalId
        
        '''<remarks/>
        GetWinServiceDateTime
        
        '''<remarks/>
        GetWinServiceComputerInfo
        
        '''<remarks/>
        GetExistNobatsInOtherData
        
        '''<remarks/>
        GetSTPsTblConfigurationData
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/")>  _
    Public Enum ACKSignal
        
        '''<remarks/>
        NoneOrMsg
        
        '''<remarks/>
        AckError
        
        '''<remarks/>
        WebMethodSyncTrucks
        
        '''<remarks/>
        WebMethodSyncAll
        
        '''<remarks/>
        SystemStatusChangedToSystemGeneral
        
        '''<remarks/>
        SystemStatusChangedToSystemClearNobatsTrucksBufferAndSilent
        
        '''<remarks/>
        SystemStatusChangedToSystemFullSilent
        
        '''<remarks/>
        SystemStatusChangedToWinServiceSilent
        
        '''<remarks/>
        SystemStatusChangedToStpExistNobatSilent
        
        '''<remarks/>
        SystemStatusChangedToExecuteNonOutputSqlCommand
        
        '''<remarks/>
        SystemStatusChangedToExecuteWithOutputSqlCommand
        
        '''<remarks/>
        WinServiceStart
        
        '''<remarks/>
        WinServiceStop
        
        '''<remarks/>
        SendCurrentStatus
        
        '''<remarks/>
        SetWinServiceTimerInterval
        
        '''<remarks/>
        SetWinServiceSyncCounting
        
        '''<remarks/>
        GetWinServiceConnectionString
        
        '''<remarks/>
        GetWinServiceTerminalId
        
        '''<remarks/>
        GetWinServiceDateTime
        
        '''<remarks/>
        GetWinServiceComputerInfo
        
        '''<remarks/>
        GetExistNobatsInOtherData
        
        '''<remarks/>
        GetSTPsTblConfigurationData
        
        '''<remarks/>
        IdentifyTerminal
        
        '''<remarks/>
        ClientWinAppSettingSqlServerAdmin
        
        '''<remarks/>
        ClientWinAppServiceStart
        
        '''<remarks/>
        ServerWinServiceStart
        
        '''<remarks/>
        ServerWinServiceStop
        
        '''<remarks/>
        ServerWinServiceGarbageTimerElapsed
        
        '''<remarks/>
        ServerWinAppCreateTerminal
        
        '''<remarks/>
        ClientWinReportAppTimerStart
        
        '''<remarks/>
        ClientWinReportAppPassOk
        
        '''<remarks/>
        CenterControlChangeSystemStatus
        
        '''<remarks/>
        BarnamehOnLineDelNobat
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/")>  _
    Public Enum LogSource
        
        '''<remarks/>
        None
        
        '''<remarks/>
        ServerWinApplication
        
        '''<remarks/>
        ServerWinService
        
        '''<remarks/>
        ServerWebService
        
        '''<remarks/>
        ClientWinService
        
        '''<remarks/>
        ClientWinApplication
        
        '''<remarks/>
        ClientWebApplication
        
        '''<remarks/>
        ClientWinApplicationReporting
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/")>  _
    Public Enum Database
        
        '''<remarks/>
        None
        
        '''<remarks/>
        TDBClient
        
        '''<remarks/>
        TDBServer
        
        '''<remarks/>
        LocalSystem
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/")>  _
    Public Enum TruckTrace
        
        '''<remarks/>
        None
        
        '''<remarks/>
        NoPelakSerialFound
        
        '''<remarks/>
        NoRecordFound
        
        '''<remarks/>
        OK
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodSetNewSystemStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodGetNewSystemStatusCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodGetNewSystemStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodGetNewSystemStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SystemStatus
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SystemStatus)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TerminalIdToChangeStatuss() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Short)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CommandId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property CommandValueData() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub ACKSignalRecivedCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodSyncTrucksCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodSyncTrucksCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodSyncTrucksCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodSyncAllCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodSyncAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodSyncAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property SyncNobats() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SyncTrucks() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SyncTerminals() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodIdentifyTerminalCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodIdentifyTerminalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodIdentifyTerminalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Short)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodCreateNewterminalCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodCreateNewterminalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodCreateNewterminalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property TerminalId() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Short)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IdentifyCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodTerminalIdFromTerminalNameCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodTerminalIdFromTerminalNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodTerminalIdFromTerminalNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Short)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodLoggingReportCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodLoggingReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodLoggingReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Short)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodGetTruckTraceCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodGetTruckTraceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodGetTruckTraceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As TruckTrace
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),TruckTrace)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Data() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodGetLastNobatInOnlineifExistCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodGetLastNobatInOnlineifExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodGetLastNobatInOnlineifExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NobatDateTime() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodCurrentShamsiDateCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodCurrentShamsiDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodCurrentShamsiDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodCurrentTimeCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodCurrentTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodCurrentTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodUserAuthenticationCompletedEventHandler(ByVal sender As Object, ByVal e As WebMethodUserAuthenticationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WebMethodUserAuthenticationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodDelNobatBarnameOnlineCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub WebMethodDelNobatUserRequestCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
